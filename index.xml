<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fuel</title><link>https://theseion.github.io/Fuel/</link><description>Recent content on Fuel</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://theseion.github.io/Fuel/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://theseion.github.io/Fuel/releases/5.1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.1.0/</guid><description> Version 5.1.0 # 18 June 2022
Announcement # A small release to add convenience methods for serialization and materialization. It also includes a bug fix for object collection serialization and materialization and more tests.
Changes # Add multiple class side convenience methods to FLSerialzier Add multiple class side convenience methods to FLMaterializer Add additional serialization convenience extensions to Object Removed some obsolete code Added more tests Breaking changes # FLMaterializer&amp;gt;&amp;gt;materializeHeader now correctly answers the header instead of FLMaterializedObjects</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.6/</guid><description>Version 5.0.6 # 2 June 2022
Announcement # Fixed cleanup of SystemOrganization during tests</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.5/</guid><description>Version 5.0.5 # 21 May 2022
Announcement # Replaced #doWithIndex: in a test with #withIndexDo:.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.3/</guid><description>Version 5.0.3 # 23 April 2022
Announcement # Improved test case to be more compatible across versions and dialects.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.4/</guid><description>Version 5.0.4 # 28 April 2022
Announcement # Fixed some lint issues.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.2/</guid><description> Version 5.0.2 # 15 April 2022
Announcement # Added new convenience method.
Changes # Added convenience method FLConfiguration&amp;gt;&amp;gt;onStream:. This method allows FLSerializer and FLMaterializer instances to be reused, even when setting a new stream on every invocation (this wasn&amp;rsquo;t possible with #streamFactory:).</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.1/</guid><description>Version 5.0.1 # 27 February 2022
Announcement # Old code was discovered in a method extension. The code has been updated and a new test will prevent this from happening in the future.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/5.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/5.0.0/</guid><description>Version 5.0.0 # 27 February 2022
Announcement # Although release 5.0.0 includes only one change, but introduces a change in the serialization format.
Changes # Added full support for stateful traits (aka &amp;ldquo;TraitsV2&amp;rdquo; in Pharo). Notes # Stateful traits have instance variables that are applied to the target class. To support this, Fuel needs to serialize additional information about traits.
Stateful traits are available in Pharo only, starting at version 8.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/4.1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/4.1.1/</guid><description> Version 4.1.1 # 23 January 2022
Announcement # This release contains only a fix to some tests, no change in functionality.
Changes # Fixed class variable references in FLHookedSubstitutionTest</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/4.1.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/4.1.0/</guid><description> Version 4.1.0 # 03 December 2021
Announcement # This release contains only one small improvement.
Changes # FLConfiguration&amp;gt;&amp;gt;fileName: has been renamed to filePath: to better reflect its use. The comment in this method has also been updated (parts of it were outdated).</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/4.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/4.0.0/</guid><description>Version 4.0.0 # 31 October 2021
Announcement # We are excited to announce Fuel 4.0.0!
This version brings with it some changes that we have had in mind for years, as well as support for some of the newer features of Squeak, Pharo, and the OpenSmalltalk VM.
There&amp;rsquo;s still a lot to document so you will have to look at the code to get started. The public API methods on FLSerializer, FLMaterializer, and FLConfiguration include comments and FLUserGuidesTest and FLConfigurationTest show off some of the most interesting scenarios (you can load tests by loading the Tests Metacello group from the baseline).</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/3.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/3.0.0/</guid><description>Version 3.0.0 # 19 February 2018
Announcement # Version 3.0.0 is essentially versino 2.2.0. However, the sources are now on Github and we&amp;rsquo;ve done some work on repackaging.
Use Metacello to install from baselin by following the instructions at https://github.com/theseion/Fuel.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.9.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.9.3/</guid><description>Version 1.9 # 17 February 2014
Changes: # (feature) the #fuelReplacement selector offers the ability to statically replace an object (e.g. with nil) during analysis. This can lead to significantly smaller graphs and improved speed when serializing large graphs (feature) serialize the same graph that was analyzed instead of retrazing the graph during serialization. This prevents changes in the graph from happening between analysis and serialization (change) store source when serializing CompiledMethod objects.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.9/</guid><description>Version 1.9 # 8 March 2013
Announcement # We are happy to announce Fuel 1.9.
The default set of packages of this version already comes in Pharo 2.0, so you it&amp;rsquo;s not necessary to install it there. However, Fuel also works out-of-the-box in Pharo from 1.1 up to 2.0, as well as in Squeak 4.1 up to 4.4. You can see our documentation for complete installation and use guides.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.8/</guid><description>Version 1.8 # 26 May 2012
We are proud to announce Fuel 1.8 with a lot of new features and documentation. Of course, we don&amp;rsquo;t stop working but it was time to freeze a stable version.
Fuel works out of the box in Pharo from 1.1 up to 2.0 (checked at #20094). Please check our Documentation for complete installation and use guides.
Below there are some remarkable changes.
Much more complete user guides.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.8.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.8.1/</guid><description>Version 1.8.1 # 26 May 2012
Announcement # We want to announce Fuel release 1.8.1.
This release includes one fix: serialization / materialization of Date objects. The rest of the work went into making fuel work with as many images as possible. All tests run green.
Supported and tested images: Pharo 1.1.1, 1.1.2, 1.2, 1.3, 1.4, 2.0 and Squeak 4.1, 4.2, 4.3, 4.4.
Have fun!
Description same as 1.8</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.7/</guid><description>Version 1.7 # 14 October 2011
We have released the new version 1.7 of Fuel. The list of changes includes performance optimizations, design clean-ups, and new features.
The FLSerializer and FLMaterializer API has changed. They are no longer implementing the algorithms but are a kind of Fa√ßade. Developer guides with examples: Getting Started and Customizing the graph. Serialization substitutions: &amp;ldquo;Store this object instead of me.&amp;rdquo; Global sends: &amp;ldquo;Restore me by sending this selector to this global&amp;rdquo; Versioning the stream: We prefix the stream with a version number that should match when loading.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.6/</guid><description>Version 1.6 # 19 August 2011
Hello!
I want to announce in this post the new release version 1.6. This version does not add any new concrete functionality but has two main achievements: a performance improvement and a design clean up.
Many changes included in this release are part of a design clean up. They are a necessary step forward to new functionalities that are coming soon. They make code more understandable.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.5/</guid><description>Version 1.5 # 6 July 2011
I am happy to announce the new release version 1.5. Below is the list of changes. In next days we will update the home page with current state. For example, we have much more to show in benchmarks section. Of course, we have many ideas and new issues to keep working on Fuel.
Initialize instances after materialization implementing #fuelAfterMaterialization. Ignore transient instance variables overriding #fuelIgnoredInstanceVariableNames.</description></item><item><title/><link>https://theseion.github.io/Fuel/builtin-header-support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/builtin-header-support/</guid><description>Since the graph of objects serialized in a file can be large, and it can be useful to query some small extra info, Fuel supports the possibility to easily add such information in a header. The following examples show this set of features:
| serializer | serializer := FLSerializer newDefault. serializer header at: #timestamp putAdditionalObject: TimeStamp now. serializer header addPreMaterializationAction: [ Transcript show: &amp;#39;Before serializing&amp;#39;; cr ]. serializer header addPostMaterializationAction: [ :materialization | Transcript show: &amp;#39;Serialized at &amp;#39;; show: (materialization additionalObjectAt: #timestamp); cr; show: &amp;#39;Materialized at &amp;#39;; show: TimeStamp now; cr ].</description></item><item><title/><link>https://theseion.github.io/Fuel/customizing-the-graph/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/customizing-the-graph/</guid><description>Ignoring Instance Variables # It can happen that instance variables should never be serialized. A practical way to do this is overriding the hook method #fuelIgnoredInstanceVariableNames. Let&amp;rsquo;s say we have the class User and we do not want to serialize the instance variables &amp;lsquo;acumulatedLogins&amp;rsquo; and &amp;lsquo;applications&amp;rsquo;. So we implement:
User class &amp;gt;&amp;gt; fuelIgnoredInstanceVariableNames ^#(&amp;#39;acumulatedLogins&amp;#39; &amp;#39;applications&amp;#39;) When materialized, such instance variables will be nil. If you want to re-initialize and set values to those instance variables, you can use #fuelAfterMaterialization for that.</description></item><item><title/><link>https://theseion.github.io/Fuel/debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/debugging/</guid><description>There are a couple of packages that help us debugging Fuel. To understand the output of the tools in this guide, you should know some basics of how Fuel internally works.
Serialization # The most important thing to remark is that serialization is split in two main steps: analysis and encoding.
Analysis # It consists in a graph iteration, mapping each traversed object to its correspondent grouping, called cluster.
Encoding # After analysis, we linearly write on the stream, in these steps:</description></item><item><title/><link>https://theseion.github.io/Fuel/errors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/errors/</guid><description>We provide a hierarchy of errors which allow to clearly identify the problem if something went wrong:
FLError FLSerializationError FLNotSerializable FLObjectNotFound FLObsolete FLMaterializationError FLBadSignature FLBadVersion FLClassNotFound FLGlobalNotFound FLMethodChanged FLMethodNotFound As most classes of Fuel, they have class comments that give an idea their meanings: FLError # I represent an error produced during Fuel operation.
FLSerializationError # I represent an error happened during serialization.
FLNotSerializable # I represent an error which may happen while tracing in the graph an object that is forbidden of being serialized.</description></item><item><title/><link>https://theseion.github.io/Fuel/format-migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/format-migration/</guid><description>Until now, each Fuel version has its own stream format. Furthermore, each version is not compatible with the others. This means that when upgrading Fuel version, we will need to convert our serialized streams. We include below an example of migration. Let&amp;rsquo;s say we have some files serialized with Fuel 1.7 in a Pharo 1.4 image and we want to migrate them to Fuel 1.9.
| oldVersion newVersion fileNames objectsByFileName materializerClass serializerClass | oldVersion := &amp;#39;1.</description></item><item><title/><link>https://theseion.github.io/Fuel/managing-globals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/managing-globals/</guid><description>Let us assume a CompiledMethod is referenced from the graph to serialize. Sometimes we may be interested in storing just the selector and name of the class, because we know it will be present when materializing the graph. However, sometimes we want to really store the method with full detail.This means that given an object graph, there is not an unique way of serializing it. Fuel offers dynamic and static mechanisms to customize this.</description></item><item><title/><link>https://theseion.github.io/Fuel/migration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/migration/</guid><description>Often, we need to load objects whose class has changed since it was saved. In this document how to load them in the different cases. The figure below is useful to explain some of them. Imagine we serialized an instance of Point and we need to materialize it when Point class has changed.
ShapeChanges # Let&amp;rsquo;s start with the easier cases. If a variable was inserted, its value will be nil.</description></item><item><title/><link>https://theseion.github.io/Fuel/package-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/package-overview/</guid><description>Fuel is a general purpose serializer and it is highly customizable to cope with different objects and scenarios. Below we describe the main packages that are available in our repository. For simplicitly we omit testing packages.
Fuel # This is the &amp;ldquo;core&amp;rdquo; of Fuel. It works as a general purpose serializer and all it does is serialize and materialize. If the graph you provide to serialize contains classes, they will all be considered as &amp;ldquo;global&amp;rdquo;.</description></item><item><title/><link>https://theseion.github.io/Fuel/releases/1.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://theseion.github.io/Fuel/releases/1.4/</guid><description>Version 1.4 # 1 June 2011
Opening our News section, this post announces a new release version in ConfigurationOfFuel. It is the 1.4 and includes this list of changes:
Serialization in memory. Important refactorings done in various hierarchies and protocols. Hack to avoid several OrderedCollection &amp;raquo; makeRoomAtLast during deserialization. Small code cleanups. To expand on the topic of serialization in memory, I give an example:
aByteArray := FLSerializer serializeInMemory: sourceObject.</description></item></channel></rss>